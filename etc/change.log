2020-02-08 02;20: Added GPLv3 license to main directory and etc. Started change.log. Added directories: etc (misc files including full licenses and logs), docs (documentation), graphics (for graphics and icons), and lib (stores libraries, modules, and packages).

2020-02-08 02:45: Added new branch decks for deck and card library build. Added __init__.py to lib to enable this library. Added blank decks.py for the new library file.

2020-02-08 04:40: Added license to decks.py. Added preamble for libraries, and imports for Deck and Card. Added preamble for AbstractCard class.

2020-02-08 14:xx: For class AbstractCard, completed __init__(), __str__(), and abstractmethod __repr__(). For classes Ace, FaceCard, and NumberCard, completed __init__(), __str__(), and __repr__(). Fully tested each class. No diagnostic printouts alternates for __str__() functions at this time.

2020-02-09 03:xx: Added AbstractDeck class and its __init__() method. No testing done. Did some research on making immutable classes, but could not find the right logic to ensure initialization of attributes would work. So, card class objects are not immutable.

2020-02-09 07:20: Added to AbstractDeck class remove_top() and remaining_cards() methods. Fully tested this abstract base class and its methods. It seems to work properly.

2020-02-09 07:50: Fixed a problem with AbstractDeck.__init__() that now allows it to do decks of arbitrary multiples of 52. Corrected the problems with keyword arguments moving between parent classes in AbstractDeck and StdDeck. Cleaned up a number of style issues in the content the Spyder complained about. All methods for StdDeck and AbstractDeck work properly, including Deck.append() and repr(). In the Card classes, converted string outputs into f formatted strings. CardShoe and the methods __init__(), remove_top(), and remaining_cards() have been created and tested. A need to be able to order Cards in some fashion has shown some value for sorting Decks, since Decks inherit in place the in-place sort() method.

2020-02-10 09:10: Card.__eq__(), Card.__lt__(), and Card.__le__() built for AbstractCard, Ace, FaceCard, and NumberCard object. Using AbstractCard makes it possible to sort any Card type correctly. It ws tested on CardShoe objects since Deck objects are based on lists. I could order them rank and suit (note SUITS is actually in reverse order). It was possible to reverse the order as well. Having card orderable means that it is possible to determine winners in Blackjack when Human players pit their teams against each other. In those instances, decks are at most 2 standard decks in size and it matters who has the higher hands when more than one team player has 'blackjack', but none of the hands have Jacks. It also makes ties less likely to occur period.